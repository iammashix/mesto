{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/publicPath","webpack://mesto-project-ff/./src/cards.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"\";","import bebetka1 from './images/bebetka_1.jpeg';\nimport bebetka2 from './images/bebetka_2.jpeg';\nimport bebetka3 from './images/bebetka_3.jpeg';\nimport bebetka4 from './images/bebetka_4.jpeg';\nimport bebetka5 from './images/bebetka_5.jpeg';\nimport bebetka6 from './images/bebetka_6.jpeg';\n\nconst initialCards = [\n    {\n        name: 'Бебетка',\n        link: bebetka1\n    },\n    {\n        name: 'Бебестер',\n        link: bebetka4\n    },\n    {\n        name: 'Крейзи Беба',\n        link: bebetka2\n    },\n    {\n        name: 'Беба',\n        link: bebetka5\n    },\n    {\n        name: 'Сонный Бебстер',\n        link: bebetka3\n    },\n    {\n        name: 'Бусита',\n        link: bebetka6\n    }\n];\n\nexport default initialCards;","// создание карточки\nexport function createCard(cardTemplate, cardData, deleteCallback, likeCallback, openImageCallback) {\n    const cardElement = cardTemplate.cloneNode(true).querySelector('.card');\n    const cardImage = cardElement.querySelector('.card__image');\n    const likeButton = cardElement.querySelector('.card__like-button');\n\n    cardElement.querySelector('.card__title').textContent = cardData.name;\n    cardImage.src = cardData.link;\n    cardImage.alt = cardData.name;\n\n    cardImage.addEventListener('click', () => openImageCallback(cardData.link, cardData.name));\n    cardElement.querySelector('.card__delete-button').addEventListener('click', deleteCallback);\n    likeButton.addEventListener('click', likeCallback);\n\n    return cardElement;\n}\n\n// удаление карточки\nexport function deleteCard(event) {\n    const card = event.target.closest('.card');\n    card.remove();\n}\n\n// лайк карточки\nexport function likeCard(event) {\n    const likeButton = event.target;\n    likeButton.classList.toggle('card__like-button_is-active');\n    console.log(`Like button clicked: ${likeButton.classList}`);\n}\n","// открытие попапа\nexport function openPopup(popup) {\n    popup.classList.add('popup_is-opened');\n    document.body.style.overflow = 'hidden'; \n    document.addEventListener('keydown', handleEscClose); \n}\n\n// закрытие попапа\nexport function closePopup(popup) {\n    popup.classList.remove('popup_is-opened');\n    document.body.style.overflow = ''; \n    document.removeEventListener('keydown', handleEscClose); \n}\n\n// Esc\nfunction handleEscClose(event) {\n    if (event.key === 'Escape') {\n        const openedPopup = document.querySelector('.popup.popup_is-opened');\n        if (openedPopup) {\n            closePopup(openedPopup);\n        }\n    }\n}\n\n// Закрытие при клике на оверлей\nfunction handleOverlayClick(event) {\n    if (event.target.classList.contains('popup')) {\n        closePopup(event.target);\n    }\n}\n\nexport function addOverlayCloseHandler(popup) {\n    popup.addEventListener('click', handleOverlayClick);\n}\n","// index.js\n\nimport './pages/index.css';\nimport initialCards from './cards.js';\nimport avatar from './images/avatar.jpeg';\nimport { createCard, deleteCard, likeCard } from './components/card.js';\nimport { openPopup, closePopup, addOverlayCloseHandler } from './components/modal.js';\n\nconst cardTemplate = document.querySelector('#card-template').content;\nconst cardList = document.querySelector('.places__list');\n\n// Константы DOM\nconst editProfilePopup = document.querySelector('.popup_type_edit');\nconst newCardPopup = document.querySelector('.popup_type_new-card');\nconst imagePopup = document.querySelector('.popup_type_image');\nconst imagePopupImage = imagePopup.querySelector('.popup__image');\nconst imagePopupCaption = imagePopup.querySelector('.popup__caption');\nconst editProfileButton = document.querySelector('.profile__edit-button');\nconst addCardButton = document.querySelector('.profile__add-button');\nconst closeButtons = document.querySelectorAll('.popup__close');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\n\n// Фото профиля\ndocument.querySelector('.profile__image').style.backgroundImage = `url(${avatar})`;\n\n// Открытие попапа с изображением\nexport function openImagePopup(imageSrc, imageAlt) {\n    imagePopupImage.src = imageSrc;\n    imagePopupImage.alt = imageAlt;\n    imagePopupCaption.textContent = imageAlt;\n    openPopup(imagePopup);\n}\n\n// Вывод карточек\nfunction showCards(cards) {\n    cards.forEach((cardData) => {\n        const cardElement = createCard(cardTemplate, cardData, deleteCard, likeCard, openImagePopup);\n        cardList.append(cardElement);\n    });\n}\n\nshowCards(initialCards);\n\n// Форма \"Новое место\"\nconst newCardForm = document.forms['new-place']; // Получаем форму \"Новое место\"\nconst placeNameInput = newCardForm.elements['place-name'];\nconst linkInput = newCardForm.elements['link'];\nconst submitButton = newCardForm.querySelector('.popup__button');\n\n// Регулярное выражение для проверки URL\nconst urlRegex = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n\n// Сообщения об ошибках\nconst placeNameErrorMessages = {\n    valueMissing: 'Это поле обязательно для заполнения.',\n    patternMismatch: 'Используйте только латинские и кириллические буквы, знаки дефиса и пробелы.',\n    tooShort: 'Название должно содержать не менее 2 символов.',\n    tooLong: 'Название должно содержать не более 30 символов.'\n};\nconst linkErrorMessages = {\n    valueMissing: 'Это поле обязательно для заполнения.',\n    typeMismatch: 'Введите корректный URL.'\n};\n\n// Функция для отображения ошибок\nfunction showInputError(inputElement, errorMessage) {\n    const errorElement = newCardForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add('popup__input-error_active');\n}\n\n// Функция для скрытия ошибок\nfunction hideInputError(inputElement) {\n    const errorElement = newCardForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = '';\n    errorElement.classList.remove('popup__input-error_active');\n}\n\n// Функция для проверки валидности поля\nfunction checkInputValidity(inputElement) {\n    if (inputElement.validity.valueMissing) {\n        showInputError(inputElement, 'Это поле обязательно для заполнения.');\n        return false;\n    }\n\n    if (inputElement.name === 'place-name') {\n        if (!/^[\\w\\s-]{2,30}$/i.test(inputElement.value)) {\n            showInputError(inputElement, placeNameErrorMessages.patternMismatch);\n            return false;\n        }\n    }\n\n    if (inputElement.name === 'link') {\n        if (!urlRegex.test(inputElement.value)) {\n            showInputError(inputElement, linkErrorMessages.typeMismatch);\n            return false;\n        }\n    }\n\n    hideInputError(inputElement);\n    return true;\n}\n\n// Обработчик изменения значений в полях ввода\nfunction handleInputChange(event) {\n    const inputElement = event.target;\n    checkInputValidity(inputElement);\n    toggleButtonState();\n}\n\n// Функция для управления состоянием кнопки\nfunction toggleButtonState() {\n    const isValidForm = newCardForm.checkValidity();\n    submitButton.disabled = !isValidForm;\n}\n\n// Обработчик события submit для формы\nfunction handleNewCardFormSubmit(evt) {\n    evt.preventDefault();\n\n    // Действия при успешной валидации (добавление карточки и т.д.)\n    const cardData = {\n        name: placeNameInput.value,\n        link: linkInput.value\n    };\n\n    const cardElement = createCard(cardTemplate, cardData, deleteCard, likeCard, openImagePopup);\n    cardList.prepend(cardElement); // Добавляем карточку в начало списка\n\n    newCardForm.reset(); // Очищаем форму\n    toggleButtonState(); // Проверяем состояние кнопки\n    closePopup(newCardPopup); // Закрываем попап\n}\n\n// Добавление слушателей событий\nplaceNameInput.addEventListener('input', handleInputChange);\nlinkInput.addEventListener('input', handleInputChange);\nnewCardForm.addEventListener('submit', handleNewCardFormSubmit);\naddCardButton.addEventListener('click', () => {\n    openPopup(newCardPopup);\n    newCardForm.reset(); // Сбрасываем форму при открытии попапа\n    toggleButtonState(); // Проверяем состояние кнопки\n});\n\n// Обработчики закрытия попапов\ncloseButtons.forEach((button) => {\n    const popup = button.closest('.popup');\n    button.addEventListener('click', () => closePopup(popup));\n    addOverlayCloseHandler(popup);\n});\n"],"names":["__webpack_require__","name","link","createCard","cardTemplate","cardData","deleteCallback","likeCallback","openImageCallback","cardElement","cloneNode","querySelector","cardImage","likeButton","textContent","src","alt","addEventListener","deleteCard","event","target","closest","remove","likeCard","classList","toggle","console","log","openPopup","popup","add","document","body","style","overflow","handleEscClose","closePopup","removeEventListener","key","openedPopup","handleOverlayClick","contains","content","cardList","newCardPopup","imagePopup","imagePopupImage","imagePopupCaption","addCardButton","closeButtons","querySelectorAll","openImagePopup","imageSrc","imageAlt","backgroundImage","cards","forEach","append","showCards","newCardForm","forms","placeNameInput","elements","linkInput","submitButton","urlRegex","placeNameErrorMessages","valueMissing","patternMismatch","tooShort","tooLong","linkErrorMessages","typeMismatch","showInputError","inputElement","errorMessage","errorElement","handleInputChange","validity","test","value","hideInputError","toggleButtonState","isValidForm","checkValidity","disabled","evt","preventDefault","prepend","reset","button","addOverlayCloseHandler"],"sourceRoot":""}
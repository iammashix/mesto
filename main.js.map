{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/publicPath","webpack://mesto-project-ff/./src/cards.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"\";","import bebetka1 from './images/bebetka_1.jpeg';\nimport bebetka2 from './images/bebetka_2.jpeg';\nimport bebetka3 from './images/bebetka_3.jpeg';\nimport bebetka4 from './images/bebetka_4.jpeg';\nimport bebetka5 from './images/bebetka_5.jpeg';\nimport bebetka6 from './images/bebetka_6.jpeg';\n\nconst initialCards = [\n    {\n        name: 'Бебетка',\n        link: bebetka1\n    },\n    {\n        name: 'Бебестер',\n        link: bebetka4\n    },\n    {\n        name: 'Крейзи Беба',\n        link: bebetka2\n    },\n    {\n        name: 'Беба',\n        link: bebetka5\n    },\n    {\n        name: 'Сонный Бебстер',\n        link: bebetka3\n    },\n    {\n        name: 'Бусита',\n        link: bebetka6\n    }\n];\n\nexport default initialCards;","// создание карточки\nexport function createCard(cardTemplate, cardData, deleteCallback, likeCallback, openImageCallback) {\n    const cardElement = cardTemplate.cloneNode(true).querySelector('.card');\n    const cardImage = cardElement.querySelector('.card__image');\n    const likeButton = cardElement.querySelector('.card__like-button');\n\n    cardElement.querySelector('.card__title').textContent = cardData.name;\n    cardImage.src = cardData.link;\n    cardImage.alt = cardData.name;\n\n    cardImage.addEventListener('click', () => openImageCallback(cardData.link, cardData.name));\n    cardElement.querySelector('.card__delete-button').addEventListener('click', deleteCallback);\n    likeButton.addEventListener('click', likeCallback);\n\n    return cardElement;\n}\n\n// удаление карточки\nexport function deleteCard(event) {\n    const card = event.target.closest('.card');\n    card.remove();\n}\n\n// лайк карточки\nexport function likeCard(event) {\n    const likeButton = event.target;\n    likeButton.classList.toggle('card__like-button_is-active');\n    console.log(`Like button clicked: ${likeButton.classList}`);\n}\n","// открытие попапа\nexport function openPopup(popup) {\n    popup.classList.add('popup_is-opened');\n    document.body.style.overflow = 'hidden'; \n    document.addEventListener('keydown', handleEscClose); \n}\n\n// закрытие попапа\nexport function closePopup(popup) {\n    popup.classList.remove('popup_is-opened');\n    document.body.style.overflow = ''; \n    document.removeEventListener('keydown', handleEscClose); \n}\n\n// Esc\nfunction handleEscClose(event) {\n    if (event.key === 'Escape') {\n        const openedPopup = document.querySelector('.popup.popup_is-opened');\n        if (openedPopup) {\n            closePopup(openedPopup);\n        }\n    }\n}\n\n// Закрытие при клике на оверлей\nfunction handleOverlayClick(event) {\n    if (event.target.classList.contains('popup')) {\n        closePopup(event.target);\n    }\n}\n\nexport function addOverlayCloseHandler(popup) {\n    popup.addEventListener('click', handleOverlayClick);\n}\n","import './pages/index.css';\nimport initialCards from './cards.js';\nimport avatar from './images/avatar.jpeg';\nimport { createCard, deleteCard, likeCard } from './components/card.js';\nimport { openPopup, closePopup, addOverlayCloseHandler } from './components/modal.js';\n\nconst cardTemplate = document.querySelector('#card-template').content;\nconst cardList = document.querySelector('.places__list');\n\n// Константы DOM\nconst editProfilePopup = document.querySelector('.popup_type_edit');\nconst newCardPopup = document.querySelector('.popup_type_new-card');\nconst imagePopup = document.querySelector('.popup_type_image');\nconst imagePopupImage = imagePopup.querySelector('.popup__image');\nconst imagePopupCaption = imagePopup.querySelector('.popup__caption');\nconst editProfileButton = document.querySelector('.profile__edit-button');\nconst addCardButton = document.querySelector('.profile__add-button');\nconst closeButtons = document.querySelectorAll('.popup__close');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\n\n// Фото профиля\ndocument.querySelector('.profile__image').style.backgroundImage = `url(${avatar})`;\n\n// Открытие попапа с изображением\nexport function openImagePopup(imageSrc, imageAlt) {\n    imagePopupImage.src = imageSrc;\n    imagePopupImage.alt = imageAlt;\n    imagePopupCaption.textContent = imageAlt;\n    openPopup(imagePopup);\n}\n\n// Вывод карточек\nfunction showCards(cards) {\n    cards.forEach((cardData) => {\n        const cardElement = createCard(cardTemplate, cardData, deleteCard, likeCard, openImagePopup);\n        cardList.append(cardElement);\n    });\n}\n\nshowCards(initialCards);\n\n// Форма DOM\nconst editProfileForm = document.querySelector('.popup__form[name=\"edit-profile-form\"]');\nconst nameInput = editProfileForm.querySelector('.popup__input[name=\"name\"]');\nconst jobInput = editProfileForm.querySelector('.popup__input[name=\"description\"]');\nconst submitButton = editProfileForm.querySelector('.popup__button');\n\n// Регулярные выражения для валидации\nconst nameRegex = /^[A-Za-zА-Яа-яЁё\\s-]{2,40}$/;\nconst descriptionRegex = /^[A-Za-zА-Яа-яЁё\\s-]{2,200}$/;\n\nconst cardNameRegex = /^[A-Za-zА-Яа-яЁё\\s-]{2,30}$/;\n\n// Сообщения об ошибках\nconst nameErrorMessages = {\n    valueMissing: 'Это поле обязательно для заполнения.',\n    patternMismatch: 'Используйте только латинские и кириллические буквы, знаки дефиса и пробелы.',\n    tooShort: 'Имя должно содержать не менее 2 символов.',\n    tooLong: 'Имя должно содержать не более 40 символов.'\n};\n\nconst descriptionErrorMessages = {\n    valueMissing: 'Это поле обязательно для заполнения.',\n    patternMismatch: 'Используйте только латинские и кириллические буквы, знаки дефиса и пробелы.',\n    tooShort: 'Описание должно содержать не менее 2 символов.',\n    tooLong: 'Описание должно содержать не более 200 символов.'\n};\n\nconst cardNameErrorMessages = {\n    valueMissing: 'Это поле обязательно для заполнения.',\n    patternMismatch: 'Используйте только латинские и кириллические буквы, знаки дефиса и пробелы. Длина от 2 до 30 символов.',\n    tooShort: 'Название должно содержать не менее 2 символов.',\n    tooLong: 'Название должно содержать не более 30 символов.'\n};\n\n// Функция для отображения ошибок\nfunction showInputError(inputElement, errorMessage) {\n    const errorElement = editProfileForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add('popup__input-error_active');\n}\n\n// Функция для скрытия ошибок\nfunction hideInputError(inputElement) {\n    const errorElement = editProfileForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = '';\n    errorElement.classList.remove('popup__input-error_active');\n}\n\n// Функция для проверки валидности поля\nfunction checkInputValidity(inputElement) {\n    if (inputElement.validity.valueMissing) {\n        showInputError(inputElement, 'Это поле обязательно для заполнения.');\n        return false;\n    }\n\n    if (inputElement.name === 'name') {\n        if (!nameRegex.test(inputElement.value)) {\n            showInputError(inputElement, nameErrorMessages.patternMismatch);\n            return false;\n        }\n\n        if (inputElement.value.length < 2) {\n            showInputError(inputElement, nameErrorMessages.tooShort);\n            return false;\n        }\n\n        if (inputElement.value.length > 40) {\n            showInputError(inputElement, nameErrorMessages.tooLong);\n            return false;\n        }\n    }\n\n    if (inputElement.name === 'description') {\n        if (!descriptionRegex.test(inputElement.value)) {\n            showInputError(inputElement, descriptionErrorMessages.patternMismatch);\n            return false;\n        }\n\n        if (inputElement.value.length < 2) {\n            showInputError(inputElement, descriptionErrorMessages.tooShort);\n            return false;\n        }\n\n        if (inputElement.value.length > 200) {\n            showInputError(inputElement, descriptionErrorMessages.tooLong);\n            return false;\n        }\n    }\n\n    hideInputError(inputElement);\n    return true;\n}\n\n// Обработчик изменения значений в полях ввода\nfunction handleInputChange(event) {\n    const inputElement = event.target;\n    checkInputValidity(inputElement);\n    toggleButtonState();\n}\n\n// Функция для управления состоянием кнопки\nfunction toggleButtonState() {\n    const isValidForm = editProfileForm.checkValidity();\n    submitButton.disabled = !isValidForm;\n}\n\n// Обработчик события submit для формы\nfunction handleEditProfileFormSubmit(evt) {\n    evt.preventDefault();\n\n    // Действия при успешной валидации (изменение данных профиля и т.д.)\n\n    closePopup(editProfilePopup);\n}\n\n// Очистка ошибок при открытии модального окна редактирования профиля\nfunction openEditProfilePopup() {\n    nameInput.value = profileTitle.textContent;\n    jobInput.value = profileDescription.textContent;\n    hideInputError(nameInput);\n    hideInputError(jobInput);\n    toggleButtonState();\n    openPopup(editProfilePopup);\n}\n\n// Добавление слушателей событий\nnameInput.addEventListener('input', handleInputChange);\njobInput.addEventListener('input', handleInputChange);\neditProfileForm.addEventListener('submit', handleEditProfileFormSubmit);\neditProfileButton.addEventListener('click', openEditProfilePopup);\n\n// Обработчики закрытия попапов\ncloseButtons.forEach((button) => {\n    const popup = button.closest('.popup');\n    button.addEventListener('click', () => closePopup(popup));\n    addOverlayCloseHandler(popup);\n});\n\n// Валидация и обработка формы \"Новое место\"\nconst newCardForm = document.querySelector('.popup__form[name=\"new-place\"]');\nconst cardNameInput = newCardForm.querySelector('.popup__input_type_card-name');\nconst cardLinkInput = newCardForm.querySelector('.popup__input_type_url');\nconst newCardSubmitButton = newCardForm.querySelector('.popup__button');\n\n// Функция для отображения ошибок\nfunction showNewCardInputError(inputElement, errorMessage) {\n    const errorElement = newCardForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add('popup__input-error_active');\n}\n\n// Функция для скрытия ошибок\nfunction hideNewCardInputError(inputElement) {\n    const errorElement = newCardForm.querySelector(`.popup__input-error_type_${inputElement.name}`);\n    errorElement.textContent = '';\n    errorElement.classList.remove('popup__input-error_active');\n}\n\n// Функция для проверки валидности поля\nfunction checkNewCardInputValidity(inputElement) {\n    if (inputElement.validity.valueMissing) {\n        showNewCardInputError(inputElement, 'Это поле обязательно для заполнения.');\n        return false;\n    }\n\n    if (inputElement.name === 'place-name') {\n        if (!cardNameRegex.test(inputElement.value)) {\n            showNewCardInputError(inputElement, cardNameErrorMessages.patternMismatch);\n            return false;\n        }\n\n        if (inputElement.value.length < 2) {\n            showNewCardInputError(inputElement, cardNameErrorMessages.tooShort);\n            return false;\n        }\n\n        if (inputElement.value.length > 30) {\n            showNewCardInputError(inputElement, cardNameErrorMessages.tooLong);\n            return false;\n        }\n    }\n\n    if (inputElement.name === 'link') {\n        if (inputElement.validity.typeMismatch) {\n            showNewCardInputError(inputElement, inputElement.validationMessage);\n            return false;\n        }\n    }\n\n    hideNewCardInputError(inputElement);\n    return true;\n}\n\n// Обработчик изменения значений в полях ввода\nfunction handleNewCardInputChange(event) {\n    const inputElement = event.target;\n    checkNewCardInputValidity(inputElement);\n    toggleNewCardButtonState();\n}\n\n// Функция для управления состоянием кнопки\nfunction toggleNewCardButtonState() {\n    const isValidForm = newCardForm.checkValidity();\n    newCardSubmitButton.disabled = !isValidForm;\n}\n\n// Обработчик события submit для формы\nfunction handleNewCardFormSubmit(evt) {\n    evt.preventDefault();\n\n    // Действия при успешной валидации (добавление новой карточки и т.д.)\n    const cardData = {\n        name: cardNameInput.value,\n        link: cardLinkInput.value\n    };\n\n    const cardElement = createCard(cardTemplate, cardData, deleteCard, likeCard, openImagePopup);\n    cardList.prepend(cardElement);\n\n    newCardForm.reset();\n    toggleNewCardButtonState();\n    closePopup(newCardPopup);\n}\n\n// Очистка ошибок при открытии модального окна новой карточки\nfunction openNewCardPopup() {\n    newCardForm.reset();\n    hideNewCardInputError(cardNameInput);\n    hideNewCardInputError(cardLinkInput);\n    toggleNewCardButtonState();\n    openPopup(newCardPopup);\n}\n\n// Добавление слушателей событий\ncardNameInput.addEventListener('input', handleNewCardInputChange);\ncardLinkInput.addEventListener('input', handleNewCardInputChange);\nnewCardForm.addEventListener('submit', handleNewCardFormSubmit);\naddCardButton.addEventListener('click', openNewCardPopup);\n"],"names":["__webpack_require__","name","link","createCard","cardTemplate","cardData","deleteCallback","likeCallback","openImageCallback","cardElement","cloneNode","querySelector","cardImage","likeButton","textContent","src","alt","addEventListener","deleteCard","event","target","closest","remove","likeCard","classList","toggle","console","log","openPopup","popup","add","document","body","style","overflow","handleEscClose","closePopup","removeEventListener","key","openedPopup","handleOverlayClick","contains","content","cardList","editProfilePopup","newCardPopup","imagePopup","imagePopupImage","imagePopupCaption","editProfileButton","addCardButton","closeButtons","querySelectorAll","profileTitle","profileDescription","openImagePopup","imageSrc","imageAlt","backgroundImage","cards","forEach","append","showCards","editProfileForm","nameInput","jobInput","submitButton","nameRegex","descriptionRegex","cardNameRegex","nameErrorMessages","descriptionErrorMessages","cardNameErrorMessages","showInputError","inputElement","errorMessage","errorElement","hideInputError","handleInputChange","validity","valueMissing","test","value","length","checkInputValidity","toggleButtonState","isValidForm","checkValidity","disabled","evt","preventDefault","button","addOverlayCloseHandler","newCardForm","cardNameInput","cardLinkInput","newCardSubmitButton","showNewCardInputError","hideNewCardInputError","handleNewCardInputChange","typeMismatch","validationMessage","checkNewCardInputValidity","toggleNewCardButtonState","prepend","reset"],"sourceRoot":""}